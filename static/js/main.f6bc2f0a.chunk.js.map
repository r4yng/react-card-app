{"version":3,"sources":["components/Cards.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CardsComponent","props","loadCards","a","url","state","nextUrl","axios","get","data","cards","_links","items","map","name","text","imageUrl","type","setName","set","setState","next","hasMoreItems","undefined","error","handleChange","event","filter","target","value","noFilteredItems","this","filteredItems","trim","RegExp","test","length","Form","Control","className","id","placeholder","onChange","pageStart","loadMore","hasMore","loader","item","index","Card","Img","variant","src","style","maxWidth","Body","Title","Text","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0WA4GeA,G,wDAnGb,WAAYC,GAAgB,IAAD,8BACzB,cAAMA,IAURC,UAX2B,sBAWf,sCAAAC,EAAA,sEAEFC,EACJ,EAAKC,MAAMC,SACX,0DAJM,SAOEC,IAAMC,IAAiBJ,GAPzB,oBAMNK,KAAQC,EANF,EAMEA,MAAOC,EANT,EAMSA,OAIXC,EAAQF,EAAMG,KAAI,kBAA0C,CAChEC,KADsB,EAAGA,KAEzBC,KAFsB,EAASA,KAG/BC,SAHsB,EAAeA,SAIrCC,KAJsB,EAAyBA,KAK/CC,QALsB,EAA+BC,IAKxCL,SAEf,EAAKM,SAAS,CACZR,MAAM,GAAD,mBAAM,EAAKP,MAAMO,OAAjB,YAA2BA,IAChCN,QAASK,EAAOU,KAChBC,kBAA8BC,IAAhBZ,EAAOU,OApBf,kDAuBR,EAAKD,SAAS,CAAEI,MAAK,OAvBb,0DAXe,EAsC3BC,aAAe,SAACC,GACd,EAAKN,SAAS,CAAEO,OAAQD,EAAME,OAAOC,SArCrC,EAAKxB,MAAQ,CACXsB,OAAQ,GACRH,MAAO,KACPZ,MAAO,GACPN,QAAS,KACTgB,cAAc,GAPS,E,qDA0CjB,IAMJQ,EANG,EACwCC,KAAK1B,MAA5CsB,EADD,EACCA,OAAQH,EADT,EACSA,MAAOZ,EADhB,EACgBA,MAAOU,EADvB,EACuBA,aACxBU,EACc,KAAlBL,EAAOM,OACHrB,EACAA,EAAMe,QAAO,gBAAGb,EAAH,EAAGA,KAAH,OAAc,IAAIoB,OAAJ,UAAcP,GAAU,KAAKQ,KAAKrB,MAMnE,OAJ6B,IAAzBkB,EAAcI,SAChBN,EAAkB,kDAGhBN,EACK,0CAAaA,KAGpB,qCACE,cAACa,EAAA,EAAKC,QAAN,CACEC,UAAU,eACVC,GAAG,cACHC,YAAY,cACZZ,MAAOF,EACPe,SAAUX,KAAKN,eAEjB,cAAC,IAAD,CACEkB,UAAW,EACXC,SAAUb,KAAK7B,UACf2C,QAASvB,GAA2B,KAAXK,EACzBmB,OACE,qBAAKP,UAAU,SAAf,uBAA6B,GALjC,SAUE,sBAAKA,UAAU,iBAAf,UACGP,EAAcnB,KAAI,SAACkC,EAAMC,GAAP,OACjB,eAACC,EAAA,EAAD,WACE,cAACA,EAAA,EAAKC,IAAN,CACEC,QAAQ,MACRC,IAAKL,EAAK/B,SACVqC,MAAO,CAAEC,SAAU,WAErB,eAACL,EAAA,EAAKM,KAAN,WACE,cAACN,EAAA,EAAKO,MAAN,UAAaT,EAAKjC,OAClB,eAACmC,EAAA,EAAKQ,KAAN,oBAAkBV,EAAKhC,QACvB,eAACkC,EAAA,EAAKQ,KAAN,mBAAiBV,EAAK7B,WACtB,eAAC+B,EAAA,EAAKQ,KAAN,oBAAkBV,EAAK9B,aAVhB+B,MAcZlB,c,GA5FgB4B,IAAMC,YCIpBC,MARf,WACE,OACE,qBAAKrB,UAAU,gBAAf,SACE,cAAC,EAAD,OCOSsB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f6bc2f0a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Card, Form } from \"react-bootstrap\";\r\nimport { APIResponse } from \"../models/APIResponse\";\r\nimport { IProps, IState } from \"../models/Cards\";\r\nimport \"./Cards.css\";\r\n\r\nclass CardsComponent extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {\r\n      filter: \"\",\r\n      error: null,\r\n      items: [],\r\n      nextUrl: null,\r\n      hasMoreItems: true,\r\n    };\r\n  }\r\n\r\n  loadCards = async () => {\r\n    try {\r\n      const url =\r\n        this.state.nextUrl ||\r\n        \"https://api.elderscrollslegends.io/v1/cards?pageSize=20\";\r\n      const {\r\n        data: { cards, _links },\r\n      } = await axios.get<APIResponse>(url);\r\n\r\n      // set card data from response\r\n      const items = cards.map(({ name, text, imageUrl, type, set }) => ({\r\n        name,\r\n        text,\r\n        imageUrl,\r\n        type,\r\n        setName: set.name,\r\n      }));\r\n      this.setState({\r\n        items: [...this.state.items, ...items],\r\n        nextUrl: _links.next,\r\n        hasMoreItems: _links.next !== undefined,\r\n      });\r\n    } catch (error) {\r\n      this.setState({ error });\r\n    }\r\n  };\r\n\r\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({ filter: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { filter, error, items, hasMoreItems } = this.state;\r\n    const filteredItems =\r\n      filter.trim() === \"\"\r\n        ? items\r\n        : items.filter(({ name }) => new RegExp(`${filter}`, \"i\").test(name));\r\n    let noFilteredItems;\r\n    if (filteredItems.length === 0) {\r\n      noFilteredItems = <div>No Names Found</div>;\r\n    }\r\n\r\n    if (error) {\r\n      return <div>Error: {error}</div>;\r\n    }\r\n    return (\r\n      <>\r\n        <Form.Control\r\n          className=\"mb-2 mr-sm-2\"\r\n          id=\"searchInput\"\r\n          placeholder=\"Search Name\"\r\n          value={filter}\r\n          onChange={this.handleChange}\r\n        />\r\n        <InfiniteScroll\r\n          pageStart={0}\r\n          loadMore={this.loadCards}\r\n          hasMore={hasMoreItems && filter === \"\"}\r\n          loader={\r\n            <div className=\"loader\" key={0}>\r\n              Loading...\r\n            </div>\r\n          }\r\n        >\r\n          <div className=\"card-container\">\r\n            {filteredItems.map((item, index) => (\r\n              <Card key={index}>\r\n                <Card.Img\r\n                  variant=\"top\"\r\n                  src={item.imageUrl}\r\n                  style={{ maxWidth: \"200px\" }}\r\n                />\r\n                <Card.Body>\r\n                  <Card.Title>{item.name}</Card.Title>\r\n                  <Card.Text>Text: {item.text}</Card.Text>\r\n                  <Card.Text>Set: {item.setName}</Card.Text>\r\n                  <Card.Text>Type: {item.type}</Card.Text>\r\n                </Card.Body>\r\n              </Card>\r\n            ))}\r\n            {noFilteredItems}\r\n          </div>\r\n        </InfiniteScroll>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardsComponent;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Cards from \"./components/Cards\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app-container\">\r\n      <Cards />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}