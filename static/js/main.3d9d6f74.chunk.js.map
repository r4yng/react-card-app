{"version":3,"sources":["components/SearchBar.tsx","components/Card.tsx","components/Cards.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SearchBar","filterText","onChange","Form","Control","className","id","placeholder","value","Card","data","imageUrl","name","text","setName","type","Img","variant","src","style","maxWidth","Body","Title","Text","CardsComponent","props","loadCards","a","url","state","nextUrl","process","params","pageSize","axios","get","cards","_links","items","map","set","setState","next","hasMoreItems","undefined","error","handleFilterChange","event","filter","target","noFilteredItems","this","filteredItems","trim","RegExp","test","length","pageStart","loadMore","hasMore","loader","item","index","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d9d6f74.chunk.js","sourcesContent":["import React from \"react\";\nimport { Form } from \"react-bootstrap\";\n\ninterface Props {\n  filterText: string;\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const SearchBar: React.FC<Props> = ({ filterText, onChange }) => (\n  <Form.Control\n    className=\"mb-2 mr-sm-2\"\n    id=\"searchInput\"\n    placeholder=\"Search Name\"\n    value={filterText}\n    onChange={onChange}\n  />\n);\n","import React from \"react\";\nimport { Card as BsCard } from \"react-bootstrap\";\nimport { ICard } from \"../models/Cards\";\n\ninterface CardProps {\n  data: ICard;\n}\n\nexport const Card: React.FC<CardProps> = ({\n  data: { imageUrl, name, text, setName, type },\n}) => (\n  <BsCard>\n    <BsCard.Img variant=\"top\" src={imageUrl} style={{ maxWidth: \"250px\" }} />\n    <BsCard.Body>\n      <BsCard.Title>{name}</BsCard.Title>\n      <BsCard.Text>Text: {text}</BsCard.Text>\n      <BsCard.Text>Set: {setName}</BsCard.Text>\n      <BsCard.Text>Type: {type}</BsCard.Text>\n    </BsCard.Body>\n  </BsCard>\n);\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { APIResponse } from \"../models/APIResponse\";\r\nimport { IProps, IState } from \"../models/Cards\";\r\nimport \"./Cards.css\";\r\nimport { SearchBar } from \"./SearchBar\";\r\nimport { Card } from \"./Card\";\r\n\r\nclass CardsComponent extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {\r\n      filter: \"\",\r\n      error: null,\r\n      items: [],\r\n      nextUrl: null,\r\n      hasMoreItems: true,\r\n    };\r\n  }\r\n\r\n  loadCards = async () => {\r\n    try {\r\n      const url =\r\n        this.state.nextUrl || (process.env.REACT_APP_BASE_URL as string);\r\n      let params;\r\n      if (!this.state.nextUrl) {\r\n        params = { params: { pageSize: 20 } };\r\n      }\r\n      const {\r\n        data: { cards, _links },\r\n      } = await axios.get<APIResponse>(url, params);\r\n\r\n      // set card data from response\r\n      const items = cards.map(({ name, text, imageUrl, type, set }) => ({\r\n        name,\r\n        text,\r\n        imageUrl,\r\n        type,\r\n        setName: set.name,\r\n      }));\r\n      this.setState({\r\n        items: [...this.state.items, ...items],\r\n        nextUrl: _links.next,\r\n        hasMoreItems: _links.next !== undefined,\r\n      });\r\n    } catch (error) {\r\n      this.setState({ error });\r\n    }\r\n  };\r\n\r\n  handleFilterChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({ filter: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { filter, error, items, nextUrl, hasMoreItems } = this.state;\r\n    const filteredItems =\r\n      filter.trim() === \"\"\r\n        ? items\r\n        : items.filter(({ name }) => new RegExp(`${filter}`, \"i\").test(name));\r\n    let noFilteredItems;\r\n    if (filteredItems.length === 0 && nextUrl) {\r\n      noFilteredItems = <div>No Names Found</div>;\r\n    }\r\n\r\n    if (error) {\r\n      return <div>Error: {error}</div>;\r\n    }\r\n    return (\r\n      <>\r\n        <SearchBar\r\n          filterText={filter}\r\n          onChange={this.handleFilterChange}\r\n        ></SearchBar>\r\n        <InfiniteScroll\r\n          pageStart={0}\r\n          loadMore={this.loadCards}\r\n          hasMore={hasMoreItems && filter === \"\"}\r\n          loader={\r\n            <div className=\"loader\" key={0}>\r\n              Loading...\r\n            </div>\r\n          }\r\n        >\r\n          <div className=\"card-container\">\r\n            {filteredItems.map((item, index) => (\r\n              <Card key={index} data={item} />\r\n            ))}\r\n            {noFilteredItems}\r\n          </div>\r\n        </InfiniteScroll>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardsComponent;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Cards from \"./components/Cards\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app-container\">\r\n      <Cards />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}